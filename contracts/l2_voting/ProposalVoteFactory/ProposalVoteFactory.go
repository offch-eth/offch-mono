// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
	_ = fmt.Sprintf
)

// BlockHeader is an auto generated low-level Go binding around an user-defined struct.
type BlockHeader struct {
	ParentHash       [32]byte
	OmmersHash       [32]byte
	Proposer         common.Address
	StateRoot        [32]byte
	TransactionsRoot [32]byte
	ReceiptsRoot     [32]byte
	LogsBloom        [8][32]byte
	Difficulty       *big.Int
	Height           *big.Int
	GasLimit         uint64
	GasUsed          uint64
	Timestamp        uint64
	ExtraData        []byte
	MixHash          [32]byte
	Nonce            uint64
	BaseFeePerGas    *big.Int
	WithdrawalsRoot  [32]byte
}

// String BlockHeader returns a readable string representing the user-defined struct.
func (st *BlockHeader) String() string {
	s := "User defined struct: BlockHeader {\n"

	s += fmt.Sprintf("ParentHash: %v,\n", st.ParentHash)
	s += fmt.Sprintf("OmmersHash: %v,\n", st.OmmersHash)
	s += fmt.Sprintf("Proposer: %v,\n", st.Proposer)
	s += fmt.Sprintf("StateRoot: %v,\n", st.StateRoot)
	s += fmt.Sprintf("TransactionsRoot: %v,\n", st.TransactionsRoot)
	s += fmt.Sprintf("ReceiptsRoot: %v,\n", st.ReceiptsRoot)
	s += fmt.Sprintf("LogsBloom: %v,\n", st.LogsBloom)
	s += fmt.Sprintf("Difficulty: %v,\n", st.Difficulty)
	s += fmt.Sprintf("Height: %v,\n", st.Height)
	s += fmt.Sprintf("GasLimit: %v,\n", st.GasLimit)
	s += fmt.Sprintf("GasUsed: %v,\n", st.GasUsed)
	s += fmt.Sprintf("Timestamp: %v,\n", st.Timestamp)
	s += fmt.Sprintf("ExtraData: %v,\n", st.ExtraData)
	s += fmt.Sprintf("MixHash: %v,\n", st.MixHash)
	s += fmt.Sprintf("Nonce: %v,\n", st.Nonce)
	s += fmt.Sprintf("BaseFeePerGas: %v,\n", st.BaseFeePerGas)
	s += fmt.Sprintf("WithdrawalsRoot: %v,\n", st.WithdrawalsRoot)
	s += "}"

	return s
}

// OffchGovernorMessage is an auto generated low-level Go binding around an user-defined struct.
type OffchGovernorMessage struct {
	Id                  uint64
	From                common.Address
	SrcChainId          uint64
	DestChainId         uint64
	ProposalId          *big.Int
	SnapshotBlockNumber *big.Int
	Duration            *big.Int
	VotingTokenAddress  common.Address
}

// String OffchGovernorMessage returns a readable string representing the user-defined struct.
func (st *OffchGovernorMessage) String() string {
	s := "User defined struct: OffchGovernorMessage {\n"

	s += fmt.Sprintf("Id: %v,\n", st.Id)
	s += fmt.Sprintf("From: %v,\n", st.From)
	s += fmt.Sprintf("SrcChainId: %v,\n", st.SrcChainId)
	s += fmt.Sprintf("DestChainId: %v,\n", st.DestChainId)
	s += fmt.Sprintf("ProposalId: %v,\n", st.ProposalId)
	s += fmt.Sprintf("SnapshotBlockNumber: %v,\n", st.SnapshotBlockNumber)
	s += fmt.Sprintf("Duration: %v,\n", st.Duration)
	s += fmt.Sprintf("VotingTokenAddress: %v,\n", st.VotingTokenAddress)
	s += "}"

	return s
}

// ProposalVoteFactoryBlockHeaderToRebuild is an auto generated low-level Go binding around an user-defined struct.
type ProposalVoteFactoryBlockHeaderToRebuild struct {
	BlockNumber uint64
	BlockHeader BlockHeader
}

// String ProposalVoteFactoryBlockHeaderToRebuild returns a readable string representing the user-defined struct.
func (st *ProposalVoteFactoryBlockHeaderToRebuild) String() string {
	s := "User defined struct: ProposalVoteFactoryBlockHeaderToRebuild {\n"

	s += fmt.Sprintf("BlockNumber: %v,\n", st.BlockNumber)
	s += fmt.Sprintf("BlockHeader: %v,\n", st.BlockHeader)
	s += "}"

	return s
}

// ProposalVoteFactoryMessage is an auto generated low-level Go binding around an user-defined struct.
type ProposalVoteFactoryMessage struct {
	Id           uint64
	From         common.Address
	SrcChainId   uint64
	DestChainId  uint64
	ProposalId   *big.Int
	AgainstVotes *big.Int
	ForVotes     *big.Int
	AbstainVotes *big.Int
}

// String ProposalVoteFactoryMessage returns a readable string representing the user-defined struct.
func (st *ProposalVoteFactoryMessage) String() string {
	s := "User defined struct: ProposalVoteFactoryMessage {\n"

	s += fmt.Sprintf("Id: %v,\n", st.Id)
	s += fmt.Sprintf("From: %v,\n", st.From)
	s += fmt.Sprintf("SrcChainId: %v,\n", st.SrcChainId)
	s += fmt.Sprintf("DestChainId: %v,\n", st.DestChainId)
	s += fmt.Sprintf("ProposalId: %v,\n", st.ProposalId)
	s += fmt.Sprintf("AgainstVotes: %v,\n", st.AgainstVotes)
	s += fmt.Sprintf("ForVotes: %v,\n", st.ForVotes)
	s += fmt.Sprintf("AbstainVotes: %v,\n", st.AbstainVotes)
	s += "}"

	return s
}

// ProposalVoteFactoryProofsToVerify is an auto generated low-level Go binding around an user-defined struct.
type ProposalVoteFactoryProofsToVerify struct {
	TokenAddress      []byte
	TokenAccountState []byte
	TokenAccountProof []byte
	StateRoot         [32]byte
	StorageKey        []byte
	TokenAmount       []byte
	StorageProof      []byte
	StorageRootHash   [32]byte
}

// String ProposalVoteFactoryProofsToVerify returns a readable string representing the user-defined struct.
func (st *ProposalVoteFactoryProofsToVerify) String() string {
	s := "User defined struct: ProposalVoteFactoryProofsToVerify {\n"

	s += fmt.Sprintf("TokenAddress: %v,\n", st.TokenAddress)
	s += fmt.Sprintf("TokenAccountState: %v,\n", st.TokenAccountState)
	s += fmt.Sprintf("TokenAccountProof: %v,\n", st.TokenAccountProof)
	s += fmt.Sprintf("StateRoot: %v,\n", st.StateRoot)
	s += fmt.Sprintf("StorageKey: %v,\n", st.StorageKey)
	s += fmt.Sprintf("TokenAmount: %v,\n", st.TokenAmount)
	s += fmt.Sprintf("StorageProof: %v,\n", st.StorageProof)
	s += fmt.Sprintf("StorageRootHash: %v,\n", st.StorageRootHash)
	s += "}"

	return s
}

// ContractsMetaData contains all meta data concerning the Contracts contract.
var ContractsMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_signalService\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crossChainSync\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"destChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structProposalVoteFactory.Message\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"votingTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"snapshotBlockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteKey\",\"type\":\"uint256\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"SignalSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"voteKey\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"tokenAddress\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"tokenAccountState\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"tokenAccountProof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"storageKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"tokenAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"storageProof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"storageRootHash\",\"type\":\"bytes32\"}],\"internalType\":\"structProposalVoteFactory.ProofsToVerify\",\"name\":\"content\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"parentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ommersHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"receiptsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[8]\",\"name\":\"logsBloom\",\"type\":\"bytes32[8]\"},{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"height\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"gasUsed\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"mixHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"baseFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"withdrawalsRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBlockHeader\",\"name\":\"blockHeader\",\"type\":\"tuple\"}],\"internalType\":\"structProposalVoteFactory.BlockHeaderToRebuild\",\"name\":\"blockHeader\",\"type\":\"tuple\"}],\"name\":\"countVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"destChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snapshotBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"votingTokenAddress\",\"type\":\"address\"}],\"internalType\":\"structOffchGovernor.Message\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"createProposalVoteFromSignal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"proposalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"sendSignalAboutResults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080604052600280546001600160401b031916905534801562000020575f80fd5b50604051620033a8380380620033a88339810160408190526200004391620000b2565b600180545f80546001600160a01b03199081166001600160a01b03968716179091556001600160e01b0319909116600160a01b6001600160401b0396909616959095021693909317911617905562000105565b80516001600160a01b0381168114620000ad575f80fd5b919050565b5f805f60608486031215620000c5575f80fd5b83516001600160401b0381168114620000dc575f80fd5b9250620000ec6020850162000096565b9150620000fc6040850162000096565b90509250925092565b61329580620001135f395ff3fe608060405234801561000f575f80fd5b5060043610610055575f3560e01c80634385963214610059578063544ffc9c14610081578063584dc9c5146100af578063a0485835146100c4578063b8809932146100d7575b5f80fd5b61006c610067366004612883565b6100ea565b60405190151581526020015b60405180910390f35b61009461008f3660046128ad565b610119565b60408051938452602084019290925290820152606001610078565b6100c26100bd3660046128ad565b610141565b005b6100c26100d2366004612a54565b610399565b6100c26100e5366004612c76565b61072d565b5f8281526003602090815260408083206001600160a01b038516845260080190915290205460ff165b92915050565b5f818152600360205260409020600581015460068201546007909201549091905b9193909250565b5f8181526003602081905260409091209081015460028201546101649190612d7a565b60015f9054906101000a90046001600160a01b03166001600160a01b031663c7b969086040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101b4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101d89190612d8d565b6001600160401b031610156102345760405162461bcd60e51b815260206004820152601d60248201527f566f74696e6720706572696f64206973206e6f74206f7665722079657400000060448201526064015b60405180910390fd5b6040805161010081018252600280546001600160401b031680835230602084015262028c6093830193909352614268606083015260018401546080830152600584015460a0830152600684015460c0830152600784015460e08301529091905f61029d83612da8565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550505f816040516020016102d49190612e32565b60408051808303601f1901815290829052805160208201205f5463019b28af60e61b845260048401829052919350916001600160a01b03909116906366ca2bc0906024016020604051808303815f875af1158015610334573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103589190612e41565b507fccecfc1282d17b2e6771ca70815830df03933b6275727f97a8503101756412e0818460405161038a929190612e58565b60405180910390a15050505050565b5f84815260036020526040902060028101546103f75760405162461bcd60e51b815260206004820152601d60248201527f50726f706f73616c20766f746520646f6573206e6f742065786973742e000000604482015260640161022b565b8060030154816002015461040b9190612d7a565b60015f9054906101000a90046001600160a01b03166001600160a01b031663c7b969086040518163ffffffff1660e01b8152600401602060405180830381865afa15801561045b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061047f9190612d8d565b6001600160401b0316106104cd5760405162461bcd60e51b81526020600482015260156024820152742b37ba34b733903832b934b7b21034b99037bb32b960591b604482015260640161022b565b336104d88480612e6d565b6104e191612eaf565b60048301546001600160a01b031660609190911c146105425760405162461bcd60e51b815260206004820152601d60248201527f496e76616c696420766f74696e6720746f6b656e20616464726573732e000000604482015260640161022b565b6001600160a01b0381165f90815260088301602052604090205460ff16156105c05760405162461bcd60e51b815260206004820152602b60248201527f4163636f756e742068617320616c726561647920766f746564206f6e2074686960448201526a3990383937b837b9b0b61760a91b606482015260840161022b565b6105ca84846109f4565b505f6106156105dc60a0870187612e6d565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250610b8e92505050565b6001600160a01b0383165f9081526008850160205260409020805460ff19166001179055905060ff86166106615780836005015f8282546106569190612d7a565b909155506106db9050565b5f1960ff87160161067f5780836006015f8282546106569190612d7a565b60011960ff87160161069e5780836007015f8282546106569190612d7a565b60405162461bcd60e51b815260206004820152601260248201527124b73b30b634b2103b37ba32903a3cb8329760711b604482015260640161022b565b6040805160ff88168152602081018390526001600160a01b0384169189917fb83d25c6a5d258561330739951487acb4bd09ba5190b5d32c4f261817d906792910160405180910390a350505050505050565b5f5460015460405163910af6ed60e01b81526001600160a01b039092169163910af6ed9161077791600160a01b9091046001600160401b0316908990899088908890600401612ef3565b602060405180830381865afa158015610792573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107b69190612f4a565b6107f45760405162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b21039b4b3b730b61760891b604482015260640161022b565b5f8360405160200161087691905f610100820190506001600160401b03808451168352602084015160018060a01b0380821660208601528260408701511660408601528260608701511660608601526080860151608086015260a086015160a086015260c086015160c08601528060e08701511660e086015250505092915050565b60408051601f19818403018152919052805160208201209091508581146108ed5760405162461bcd60e51b815260206004820152602560248201527f4d65737361676520697320646966666572656e742066726f6d2074686520736960448201526433b730b61760d91b606482015260840161022b565b5f818860405160200161091792919091825260601b6001600160601b031916602082015260340190565b60408051601f1981840301815282825280516020918201205f8181526003928390529290922080546001600160a01b03808e166001600160a01b03199283168117845560a08d01516002850181905560c08e015195850186905560e08e0151600486018054919094169416841790925560808d0151600185015594965091949093927fd9bc7a2db30d9cecb6dc2c637f43e132907b2409948fba985287f94e0003abec926109e1929091908990899093845260208401929092526040830152606082015260800190565b60405180910390a3505050505050505050565b6001548151604051638cfb045960e01b81526001600160401b0390911660048201525f9182916001600160a01b0390911690638cfb045990602401608060405180830381865afa158015610a4a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a6e9190612f69565b90505f80610aa3610a7f8780612e6d565b610a8c60208a018a612e6d565b610a9960408c018c612e6d565b8c60600135610bc7565b90505f610ada610ab66080890189612e6d565b610ac360a08b018b612e6d565b610ad060c08d018d612e6d565b8d60e00135610bc7565b9050818015610ae65750805b15610b0d576020860180516060808a013591015251610b0490610c7a565b84604001511492505b82610b815760408085015181517f50726f6f662069732077726f6e67206261736564206f6e2074686520626c6f63602082015267035903430b9b41d160c51b92810192909252604882015260680160408051601f198184030181529082905262461bcd60e51b825261022b91600401612ffd565b5060019695505050505050565b5f610113610bc2836040805180820182525f8082526020918201528151808301909252825182529182019181019190915290565b610c9d565b5f610c6e88888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525050604080516020601f8c018190048102820181019092528a815292508a91508990819084018382808284375f9201919091525050604080516020601f8b0181900481028201810190925289815292508991508890819084018382808284375f92019190915250889250610ca7915050565b98975050505050505050565b5f80610c8e610c89845f610cca565b6110e9565b80516020909101209392505050565b5f6101138261112c565b5f80610cb286611228565b9050610cc08186868661125a565b9695505050505050565b61020082015160609015610d3557610ce3826011612d7a565b6001600160401b03811115610cfa57610cfa6128c4565b604051908082528060200260200182016040528015610d2d57816020015b6060815260200190600190039081610d185790505b509050610da4565b6101e083015115610d4b57610ce3826010612d7a565b610d5682600f612d7a565b6001600160401b03811115610d6d57610d6d6128c4565b604051908082528060200260200182016040528015610da057816020015b6060815260200190600190039081610d8b5790505b5090505b8251610daf90611295565b815f81518110610dc157610dc161302f565b6020026020010181905250610dd98360200151611295565b81600181518110610dec57610dec61302f565b6020026020010181905250610e0483604001516112a8565b81600281518110610e1757610e1761302f565b6020026020010181905250610e2f8360600151611295565b81600381518110610e4257610e4261302f565b6020026020010181905250610e5a8360800151611295565b81600481518110610e6d57610e6d61302f565b6020026020010181905250610e858360a00151611295565b81600581518110610e9857610e9861302f565b6020026020010181905250610ecf8360c00151604051602001610ebb9190613043565b6040516020818303038152906040526112cc565b81600681518110610ee257610ee261302f565b6020026020010181905250610efa8360e0015161133a565b81600781518110610f0d57610f0d61302f565b6020026020010181905250610f2f8361010001516001600160801b031661133a565b81600881518110610f4257610f4261302f565b6020026020010181905250610f5b836101200151611348565b81600981518110610f6e57610f6e61302f565b6020026020010181905250610f87836101400151611348565b81600a81518110610f9a57610f9a61302f565b6020026020010181905250610fb3836101600151611348565b81600b81518110610fc657610fc661302f565b6020026020010181905250610fdf8361018001516112cc565b81600c81518110610ff257610ff261302f565b602002602001018190525061100b836101a00151611295565b81600d8151811061101e5761101e61302f565b6020026020010181905250611055836101c00151604051602001610ebb919060c09190911b6001600160c01b031916815260080190565b81600e815181106110685761106861302f565b6020026020010181905250826101e001515f146110ac5761108d836101e0015161133a565b81600f815181106110a0576110a061302f565b60200260200101819052505b61020083015115610113576110c5836102000151611295565b816010815181106110d8576110d861302f565b602002602001018190525092915050565b60605f6110f58361135f565b9050611103815160c0611482565b81604051602001611115929190613077565b604051602081830303815290604052915050919050565b5f6021825f015111156111815760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420524c5020627974657333322076616c75652e000000000000604482015260640161022b565b5f805f61118d85611625565b919450925090505f8160018111156111a7576111a7612edf565b146111f45760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420524c5020627974657333322076616c75652e000000000000604482015260640161022b565b5f8386602001516112059190612d7a565b80519091506020841015610cc05760208490036101000a90049695505050505050565b6060818051906020012060405160200161124491815260200190565b6040516020818303038152906040529050919050565b5f805f611268878686611958565b9150915081801561128a57508051602080830191909120875191880191909120145b979650505050505050565b60606101136112a383611a2d565b6112cc565b604051606082811b6001600160601b03191660208301529061011390603401610ebb565b606080825160011480156112f957506080835f815181106112ef576112ef61302f565b016020015160f81c105b15611305575081610113565b61131183516080611482565b83604051602001611323929190613077565b604051602081830303815290604052905092915050565b60606101136112a383611ad3565b60606101136112a3836001600160401b0316611ad3565b606081515f0361138157604080515f80825260208201909252905b5092915050565b5f805b83518110156113bd5783818151811061139f5761139f61302f565b602002602001015151826113b39190612d7a565b9150600101611384565b5f826001600160401b038111156113d6576113d66128c4565b6040519080825280601f01601f191660200182016040528015611400576020820181803683370190505b505f92509050602081015b8551831015611479575f8684815181106114275761142761302f565b602002602001015190505f60208201905061144483828451611be7565b8785815181106114565761145661302f565b6020026020010151518361146a9190612d7a565b9250505082600101925061140b565b50949350505050565b60608060388410156114e757604080516001808252818301909252906020820181803683370190505090506114b783856130a5565b60f81b815f815181106114cc576114cc61302f565b60200101906001600160f81b03191690815f1a90535061161e565b5f60015b6114f581876130d2565b1561151857611503826130e5565b9150611511610100826130fd565b90506114eb565b611523826001612d7a565b6001600160401b0381111561153a5761153a6128c4565b6040519080825280601f01601f191660200182016040528015611564576020820181803683370190505b50925061157185836130a5565b61157c9060376130a5565b60f81b835f815181106115915761159161302f565b60200101906001600160f81b03191690815f1a905350600190505b81811161161b576101006115c08284613114565b6115cc90610100613207565b6115d690886130d2565b6115e09190613212565b60f81b8382815181106115f5576115f561302f565b60200101906001600160f81b03191690815f1a905350611614816130e5565b90506115ac565b50505b9392505050565b5f805f80845f01511161167a5760405162461bcd60e51b815260206004820152601860248201527f524c50206974656d2063616e6e6f74206265206e756c6c2e0000000000000000604482015260640161022b565b602084015180515f1a607f811161169c575f60015f945094509450505061013a565b60b78111611715575f6116b0608083613114565b905080875f0151116117045760405162461bcd60e51b815260206004820152601960248201527f496e76616c696420524c502073686f727420737472696e672e00000000000000604482015260640161022b565b6001955093505f925061013a915050565b60bf8111611801575f61172960b783613114565b905080875f01511161177d5760405162461bcd60e51b815260206004820152601f60248201527f496e76616c696420524c50206c6f6e6720737472696e67206c656e6774682e00604482015260640161022b565b600183015160208290036101000a90046117978183612d7a565b8851116117e65760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420524c50206c6f6e6720737472696e672e0000000000000000604482015260640161022b565b6117f1826001612d7a565b965094505f935061013a92505050565b60f7811161187a575f61181560c083613114565b905080875f0151116118695760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420524c502073686f7274206c6973742e000000000000000000604482015260640161022b565b60019550935084925061013a915050565b5f61188660f783613114565b905080875f0151116118da5760405162461bcd60e51b815260206004820152601d60248201527f496e76616c696420524c50206c6f6e67206c697374206c656e6774682e000000604482015260640161022b565b600183015160208290036101000a90046118f48183612d7a565b88511161193c5760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b210292628103637b733903634b9ba1760511b604482015260640161022b565b611947826001612d7a565b965094506001935061013a92505050565b5f60605f61196585611c43565b90505f805f611975848a89611d2e565b815192955090935091501580806119895750815b6119d55760405162461bcd60e51b815260206004820152601a60248201527f50726f76696465642070726f6f6620697320696e76616c69642e000000000000604482015260640161022b565b5f816119ef5760405180602001604052805f815250611a1b565b611a1b866119fe600188613114565b81518110611a0e57611a0e61302f565b6020026020010151612134565b919b919a509098505050505050505050565b60605f82604051602001611a4391815260200190565b60408051808303601f19018152602080845283830190925292505f9182916020820181803683370190505090505f5b8151811015611479578383611a86816130e5565b945081518110611a9857611a9861302f565b602001015160f81c60f81b828281518110611ab557611ab561302f565b60200101906001600160f81b03191690815f1a905350600101611a72565b60605f82604051602001611ae991815260200190565b60405160208183030381529060405290505f5b6020811015611b3457818181518110611b1757611b1761302f565b01602001516001600160f81b0319165f03611b3457600101611afc565b5f611b40826020613114565b6001600160401b03811115611b5757611b576128c4565b6040519080825280601f01601f191660200182016040528015611b81576020820181803683370190505b5090505f5b8151811015611479578383611b9a816130e5565b945081518110611bac57611bac61302f565b602001015160f81c60f81b828281518110611bc957611bc961302f565b60200101906001600160f81b03191690815f1a905350600101611b86565b8282825b60208110611c235781518352611c02602084612d7a565b9250611c0f602083612d7a565b9150611c1c602082613114565b9050611beb565b905182516020929092036101000a5f190180199091169116179052505050565b60605f611c4f8361215b565b90505f81516001600160401b03811115611c6b57611c6b6128c4565b604051908082528060200260200182016040528015611cb057816020015b6040805180820190915260608082526020820152815260200190600190039081611c895790505b5090505f5b8251811015611d26575f611ce1848381518110611cd457611cd461302f565b602002602001015161218d565b90506040518060400160405280611cf78361215b565b815260200182815250838381518110611d1257611d1261302f565b602090810291909101015250600101611cb5565b509392505050565b5f60605f805f611d3d8761221a565b90505f8690505f80611d62604051806040016040528060608152602001606081525090565b5f5b8c5181101561210c578c8181518110611d7f57611d7f61302f565b602002602001015191508284611d959190612d7a565b9350611da2600188612d7a565b9650835f03611dfe578482602001518051906020012014611df95760405162461bcd60e51b8152602060048201526011602482015270092dcecc2d8d2c840e4dedee840d0c2e6d607b1b604482015260640161022b565b611ec0565b602082602001515110611e65578482602001518051906020012014611df95760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206c6172676520696e7465726e616c20686173680000000000604482015260640161022b565b84611e73836020015161233f565b14611ec05760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420696e7465726e616c206e6f64652068617368000000000000604482015260640161022b565b611ecc601060016130a5565b60ff16825f01515103611f37578551841461210c575f868581518110611ef457611ef461302f565b01602001518351805160f89290921c92505f9183908110611f1757611f1761302f565b60200260200101519050611f2a81612366565b9650600194505050612104565b815151600119016120bc575f611f4c8361239a565b90505f815f81518110611f6157611f6161302f565b016020015160f81c90505f611f77600283613225565b611f82906002613246565b90505f611f92848360ff166123bc565b90505f611f9f8b8a6123bc565b90505f611fac83836123f1565b905060ff851660021480611fc3575060ff85166003145b15611ffd57808351148015611fd85750808251145b15611fea57611fe7818b612d7a565b99505b50600160ff1b995061210c945050505050565b60ff85161580612010575060ff85166001145b1561206557825181146120305750600160ff1b995061210c945050505050565b612056885f01516001815181106120495761204961302f565b6020026020010151612366565b9a509750612104945050505050565b60405162461bcd60e51b815260206004820152602660248201527f52656365697665642061206e6f6465207769746820616e20756e6b6e6f776e206044820152650e0e4caccd2f60d31b606482015260840161022b565b60405162461bcd60e51b815260206004820152601d60248201527f526563656976656420616e20756e706172736561626c65206e6f64652e000000604482015260640161022b565b600101611d64565b50600160ff1b84148661211f87866123bc565b909e909d50909b509950505050505050505050565b805180516060916101139161214b90600190613114565b81518110611cd457611cd461302f565b6040805180820182525f808252602091820152815180830190925282518252808301908201526060906101139061246a565b60605f805f61219b85611625565b919450925090505f8160018111156121b5576121b5612edf565b146122025760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420524c502062797465732076616c75652e0000000000000000604482015260640161022b565b61221185602001518484612650565b95945050505050565b60605f8251600261222b91906130fd565b6001600160401b03811115612242576122426128c4565b6040519080825280601f01601f19166020018201604052801561226c576020820181803683370190505b5090505f5b835181101561137a57600484828151811061228e5761228e61302f565b01602001516001600160f81b031916901c826122ab8360026130fd565b815181106122bb576122bb61302f565b60200101906001600160f81b03191690815f1a90535060108482815181106122e5576122e561302f565b01602001516122f7919060f81c613225565b60f81b826123068360026130fd565b612311906001612d7a565b815181106123215761232161302f565b60200101906001600160f81b03191690815f1a905350600101612271565b5f60208251101561235257506020015190565b818060200190518101906101139190612e41565b5f60606020835f015110156123855761237e836126f4565b9050612391565b61238e8361218d565b90505b61161e8161233f565b60606101136123b7835f01515f81518110611cd457611cd461302f565b61221a565b6060825182106123da575060408051602081019091525f8152610113565b61161e83838486516123ec9190613114565b6126ff565b5f805b8084511180156124045750808351115b8015612455575082818151811061241d5761241d61302f565b602001015160f81c60f81b6001600160f81b0319168482815181106124445761244461302f565b01602001516001600160f81b031916145b1561161e57612463816130e5565b90506123f4565b60605f8061247784611625565b9193509091506001905081600181111561249357612493612edf565b146124e05760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420524c50206c6973742076616c75652e000000000000000000604482015260640161022b565b60408051602080825261042082019092525f91816020015b604080518082019091525f80825260208201528152602001906001900390816124f85790505090505f835b8651811015612645576020821061258f5760405162461bcd60e51b815260206004820152602a60248201527f50726f766964656420524c50206c6973742065786365656473206d6178206c6960448201526939ba103632b733ba341760b11b606482015260840161022b565b5f806125ca6040518060400160405280858c5f01516125ae9190613114565b8152602001858c602001516125c39190612d7a565b9052611625565b5091509150604051806040016040528083836125e69190612d7a565b8152602001848b602001516125fb9190612d7a565b8152508585815181106126105761261061302f565b6020908102919091010152612626600185612d7a565b93506126328183612d7a565b61263c9084612d7a565b92505050612523565b508152949350505050565b60605f826001600160401b0381111561266b5761266b6128c4565b6040519080825280601f01601f191660200182016040528015612695576020820181803683370190505b50905080515f036126a757905061161e565b848401602082015f5b858110156126c85782810151828201526020016126b0565b505f6001602087066020036101000a039050808251168119845116178252839450505050509392505050565b606061011382612854565b60608161270d81601f612d7a565b101561274c5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015260640161022b565b826127578382612d7a565b10156127965760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015260640161022b565b6127a08284612d7a565b845110156127e45760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b604482015260640161022b565b6060821580156128025760405191505f825260208201604052611479565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561283b578051835260209283019201612823565b5050858452601f01601f19166040525050949350505050565b606061011382602001515f845f0151612650565b80356001600160a01b038116811461287e575f80fd5b919050565b5f8060408385031215612894575f80fd5b823591506128a460208401612868565b90509250929050565b5f602082840312156128bd575f80fd5b5035919050565b634e487b7160e01b5f52604160045260245ffd5b60405161010081016001600160401b03811182821017156128fb576128fb6128c4565b60405290565b604080519081016001600160401b03811182821017156128fb576128fb6128c4565b60405161022081016001600160401b03811182821017156128fb576128fb6128c4565b6001600160401b038116811461295a575f80fd5b50565b803561287e81612946565b5f82601f830112612977575f80fd5b61297f6128d8565b80610100840185811115612991575f80fd5b845b818110156129ab578035845260209384019301612993565b509095945050505050565b80356001600160801b038116811461287e575f80fd5b5f82601f8301126129db575f80fd5b81356001600160401b03808211156129f5576129f56128c4565b604051601f8301601f19908116603f01168101908282118183101715612a1d57612a1d6128c4565b81604052838152866020858801011115612a35575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f805f8060808587031215612a67575f80fd5b84359350602085013560ff81168114612a7e575f80fd5b925060408501356001600160401b0380821115612a99575f80fd5b818701915061010080838a031215612aaf575f80fd5b91935060608701359181831115612ac4575f80fd5b918701916040838a031215612ad7575f80fd5b612adf612901565b8335612aea81612946565b8152602084013583811115612afd575f80fd5b9390930192610300848b031215612b12575f80fd5b612b1a612923565b8435815260208501356020820152612b3460408601612868565b6040820152606085013560608201526080850135608082015260a085013560a0820152612b648b60c08701612968565b60c08201526101c08086013560e08301526101e0612b838188016129b6565b858401526102009450612b9785880161295d565b610120840152612baa610220880161295d565b610140840152612bbd610240880161295d565b61016084015261026087013586811115612bd5575f80fd5b612be18e828a016129cc565b610180850152506102808701356101a0840152612c016102a0880161295d565b828401526102c08701358184015250506102e085013583820152806020830152508094505050505092959194509250565b5f8083601f840112612c42575f80fd5b5081356001600160401b03811115612c58575f80fd5b602083019150836020828501011115612c6f575f80fd5b9250929050565b5f805f805f858703610160811215612c8c575f80fd5b612c9587612868565b95506020870135945061010080603f1983011215612cb1575f80fd5b612cb96128d8565b91506040880135612cc981612946565b8252612cd760608901612868565b6020830152612ce86080890161295d565b6040830152612cf960a0890161295d565b606083015260c0880135608083015260e088013560a08301528088013560c083015250612d296101208801612868565b60e082015292506101408601356001600160401b03811115612d49575f80fd5b612d5588828901612c32565b969995985093965092949392505050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561011357610113612d66565b5f60208284031215612d9d575f80fd5b815161161e81612946565b5f6001600160401b03808316818103612dc357612dc3612d66565b6001019392505050565b6001600160401b0380825116835260018060a01b036020830151166020840152806040830151166040840152806060830151166060840152506080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301525050565b61010081016101138284612dcd565b5f60208284031215612e51575f80fd5b5051919050565b828152610120810161161e6020830184612dcd565b5f808335601e19843603018112612e82575f80fd5b8301803591506001600160401b03821115612e9b575f80fd5b602001915036819003821315612c6f575f80fd5b6001600160601b03198135818116916014851015612ed75780818660140360031b1b83161692505b505092915050565b634e487b7160e01b5f52602160045260245ffd5b6001600160401b03861681526001600160a01b0385166020820152604081018490526080606082018190528101829052818360a08301375f81830160a090810191909152601f909201601f19160101949350505050565b5f60208284031215612f5a575f80fd5b8151801515811461161e575f80fd5b5f60808284031215612f79575f80fd5b604051608081018181106001600160401b0382111715612f9b57612f9b6128c4565b6040528251612fa981612946565b81526020830151612fb981612946565b6020820152604083810151908201526060928301519281019290925250919050565b5f5b83811015612ff5578181015183820152602001612fdd565b50505f910152565b602081525f825180602084015261301b816040850160208701612fdb565b601f01601f19169190910160400192915050565b634e487b7160e01b5f52603260045260245ffd5b5f8183825b6008811015613067578151835260209283019290910190600101613048565b5050506101008201905092915050565b5f8351613088818460208801612fdb565b83519083019061309c818360208801612fdb565b01949350505050565b60ff818116838216019081111561011357610113612d66565b634e487b7160e01b5f52601260045260245ffd5b5f826130e0576130e06130be565b500490565b5f600182016130f6576130f6612d66565b5060010190565b808202811582820484141761011357610113612d66565b8181038181111561011357610113612d66565b600181815b8085111561316157815f190482111561314757613147612d66565b8085161561315457918102915b93841c939080029061312c565b509250929050565b5f8261317757506001610113565b8161318357505f610113565b816001811461319957600281146131a3576131bf565b6001915050610113565b60ff8411156131b4576131b4612d66565b50506001821b610113565b5060208310610133831016604e8410600b84101617156131e2575081810a610113565b6131ec8383613127565b805f19048211156131ff576131ff612d66565b029392505050565b5f61161e8383613169565b5f82613220576132206130be565b500690565b5f60ff831680613237576132376130be565b8060ff84160691505092915050565b60ff828116828216039081111561011357610113612d6656fea2646970667358221220e41085d80f8e1c9466055ddb630c7949cd001881f58bdcf25a3845176db3619c64736f6c63430008180033",
}

// ContractsABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractsMetaData.ABI instead.
var ContractsABI = ContractsMetaData.ABI

// ContractsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractsMetaData.Bin instead.
var ContractsBin = ContractsMetaData.Bin

// DeployContracts deploys a new Ethereum contract, binding an instance of Contracts to it.
func DeployContracts(auth *bind.TransactOpts, backend bind.ContractBackend, _srcChainId uint64, _signalService common.Address, _crossChainSync common.Address) (common.Address, *types.Transaction, *Contracts, error) {
	parsed, err := ContractsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractsBin), backend, _srcChainId, _signalService, _crossChainSync)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contracts{ContractsCaller: ContractsCaller{contract: contract}, ContractsTransactor: ContractsTransactor{contract: contract}, ContractsFilterer: ContractsFilterer{contract: contract}}, nil
}

// Contracts is an auto generated Go binding around an Ethereum contract.
type Contracts struct {
	ContractsCaller     // Read-only binding to the contract
	ContractsTransactor // Write-only binding to the contract
	ContractsFilterer   // Log filterer for contract events
}

// ContractsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractsSession struct {
	Contract     *Contracts        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractsCallerSession struct {
	Contract *ContractsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ContractsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractsTransactorSession struct {
	Contract     *ContractsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ContractsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractsRaw struct {
	Contract *Contracts // Generic contract binding to access the raw methods on
}

// ContractsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractsCallerRaw struct {
	Contract *ContractsCaller // Generic read-only contract binding to access the raw methods on
}

// ContractsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractsTransactorRaw struct {
	Contract *ContractsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContracts creates a new instance of Contracts, bound to a specific deployed contract.
func NewContracts(address common.Address, backend bind.ContractBackend) (*Contracts, error) {
	contract, err := bindContracts(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contracts{ContractsCaller: ContractsCaller{contract: contract}, ContractsTransactor: ContractsTransactor{contract: contract}, ContractsFilterer: ContractsFilterer{contract: contract}}, nil
}

// NewContractsCaller creates a new read-only instance of Contracts, bound to a specific deployed contract.
func NewContractsCaller(address common.Address, caller bind.ContractCaller) (*ContractsCaller, error) {
	contract, err := bindContracts(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractsCaller{contract: contract}, nil
}

// NewContractsTransactor creates a new write-only instance of Contracts, bound to a specific deployed contract.
func NewContractsTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractsTransactor, error) {
	contract, err := bindContracts(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractsTransactor{contract: contract}, nil
}

// NewContractsFilterer creates a new log filterer instance of Contracts, bound to a specific deployed contract.
func NewContractsFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractsFilterer, error) {
	contract, err := bindContracts(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractsFilterer{contract: contract}, nil
}

// bindContracts binds a generic wrapper to an already deployed contract.
func bindContracts(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractsMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contracts *ContractsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contracts.Contract.ContractsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contracts *ContractsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contracts.Contract.ContractsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contracts *ContractsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contracts.Contract.ContractsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contracts *ContractsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contracts.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contracts *ContractsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contracts.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contracts *ContractsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contracts.Contract.contract.Transact(opts, method, params...)
}

// HasVoted is a free data retrieval call binding the contract method 0x43859632.
//
// Solidity: function hasVoted(uint256 key, address account) view returns(bool)
func (_Contracts *ContractsCaller) HasVoted(opts *bind.CallOpts, key *big.Int, account common.Address) (bool, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "hasVoted", key, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasVoted is a free data retrieval call binding the contract method 0x43859632.
//
// Solidity: function hasVoted(uint256 key, address account) view returns(bool)
func (_Contracts *ContractsSession) HasVoted(key *big.Int, account common.Address) (bool, error) {
	return _Contracts.Contract.HasVoted(&_Contracts.CallOpts, key, account)
}

// HasVoted is a free data retrieval call binding the contract method 0x43859632.
//
// Solidity: function hasVoted(uint256 key, address account) view returns(bool)
func (_Contracts *ContractsCallerSession) HasVoted(key *big.Int, account common.Address) (bool, error) {
	return _Contracts.Contract.HasVoted(&_Contracts.CallOpts, key, account)
}

// ProposalVotes is a free data retrieval call binding the contract method 0x544ffc9c.
//
// Solidity: function proposalVotes(uint256 key) view returns(uint256 againstVotes, uint256 forVotes, uint256 abstainVotes)
func (_Contracts *ContractsCaller) ProposalVotes(opts *bind.CallOpts, key *big.Int) (struct {
	AgainstVotes *big.Int
	ForVotes     *big.Int
	AbstainVotes *big.Int
}, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "proposalVotes", key)

	outstruct := new(struct {
		AgainstVotes *big.Int
		ForVotes     *big.Int
		AbstainVotes *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AgainstVotes = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.ForVotes = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.AbstainVotes = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ProposalVotes is a free data retrieval call binding the contract method 0x544ffc9c.
//
// Solidity: function proposalVotes(uint256 key) view returns(uint256 againstVotes, uint256 forVotes, uint256 abstainVotes)
func (_Contracts *ContractsSession) ProposalVotes(key *big.Int) (struct {
	AgainstVotes *big.Int
	ForVotes     *big.Int
	AbstainVotes *big.Int
}, error) {
	return _Contracts.Contract.ProposalVotes(&_Contracts.CallOpts, key)
}

// ProposalVotes is a free data retrieval call binding the contract method 0x544ffc9c.
//
// Solidity: function proposalVotes(uint256 key) view returns(uint256 againstVotes, uint256 forVotes, uint256 abstainVotes)
func (_Contracts *ContractsCallerSession) ProposalVotes(key *big.Int) (struct {
	AgainstVotes *big.Int
	ForVotes     *big.Int
	AbstainVotes *big.Int
}, error) {
	return _Contracts.Contract.ProposalVotes(&_Contracts.CallOpts, key)
}

// CountVote is a paid mutator transaction binding the contract method 0xa0485835.
//
// Solidity: function countVote(uint256 key, uint8 support, (bytes,bytes,bytes,bytes32,bytes,bytes,bytes,bytes32) content, (uint64,(bytes32,bytes32,address,bytes32,bytes32,bytes32,bytes32[8],uint256,uint128,uint64,uint64,uint64,bytes,bytes32,uint64,uint256,bytes32)) blockHeader) returns()
func (_Contracts *ContractsTransactor) CountVote(opts *bind.TransactOpts, key *big.Int, support uint8, content ProposalVoteFactoryProofsToVerify, blockHeader ProposalVoteFactoryBlockHeaderToRebuild) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "countVote", key, support, content, blockHeader)
}

// CountVote is a paid mutator transaction binding the contract method 0xa0485835.
//
// Solidity: function countVote(uint256 key, uint8 support, (bytes,bytes,bytes,bytes32,bytes,bytes,bytes,bytes32) content, (uint64,(bytes32,bytes32,address,bytes32,bytes32,bytes32,bytes32[8],uint256,uint128,uint64,uint64,uint64,bytes,bytes32,uint64,uint256,bytes32)) blockHeader) returns()
func (_Contracts *ContractsSession) CountVote(key *big.Int, support uint8, content ProposalVoteFactoryProofsToVerify, blockHeader ProposalVoteFactoryBlockHeaderToRebuild) (*types.Transaction, error) {
	return _Contracts.Contract.CountVote(&_Contracts.TransactOpts, key, support, content, blockHeader)
}

// CountVote is a paid mutator transaction binding the contract method 0xa0485835.
//
// Solidity: function countVote(uint256 key, uint8 support, (bytes,bytes,bytes,bytes32,bytes,bytes,bytes,bytes32) content, (uint64,(bytes32,bytes32,address,bytes32,bytes32,bytes32,bytes32[8],uint256,uint128,uint64,uint64,uint64,bytes,bytes32,uint64,uint256,bytes32)) blockHeader) returns()
func (_Contracts *ContractsTransactorSession) CountVote(key *big.Int, support uint8, content ProposalVoteFactoryProofsToVerify, blockHeader ProposalVoteFactoryBlockHeaderToRebuild) (*types.Transaction, error) {
	return _Contracts.Contract.CountVote(&_Contracts.TransactOpts, key, support, content, blockHeader)
}

// CreateProposalVoteFromSignal is a paid mutator transaction binding the contract method 0xb8809932.
//
// Solidity: function createProposalVoteFromSignal(address app, bytes32 _messageHash, (uint64,address,uint64,uint64,uint256,uint256,uint256,address) message, bytes proof) returns()
func (_Contracts *ContractsTransactor) CreateProposalVoteFromSignal(opts *bind.TransactOpts, app common.Address, _messageHash [32]byte, message OffchGovernorMessage, proof []byte) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "createProposalVoteFromSignal", app, _messageHash, message, proof)
}

// CreateProposalVoteFromSignal is a paid mutator transaction binding the contract method 0xb8809932.
//
// Solidity: function createProposalVoteFromSignal(address app, bytes32 _messageHash, (uint64,address,uint64,uint64,uint256,uint256,uint256,address) message, bytes proof) returns()
func (_Contracts *ContractsSession) CreateProposalVoteFromSignal(app common.Address, _messageHash [32]byte, message OffchGovernorMessage, proof []byte) (*types.Transaction, error) {
	return _Contracts.Contract.CreateProposalVoteFromSignal(&_Contracts.TransactOpts, app, _messageHash, message, proof)
}

// CreateProposalVoteFromSignal is a paid mutator transaction binding the contract method 0xb8809932.
//
// Solidity: function createProposalVoteFromSignal(address app, bytes32 _messageHash, (uint64,address,uint64,uint64,uint256,uint256,uint256,address) message, bytes proof) returns()
func (_Contracts *ContractsTransactorSession) CreateProposalVoteFromSignal(app common.Address, _messageHash [32]byte, message OffchGovernorMessage, proof []byte) (*types.Transaction, error) {
	return _Contracts.Contract.CreateProposalVoteFromSignal(&_Contracts.TransactOpts, app, _messageHash, message, proof)
}

// SendSignalAboutResults is a paid mutator transaction binding the contract method 0x584dc9c5.
//
// Solidity: function sendSignalAboutResults(uint256 key) returns()
func (_Contracts *ContractsTransactor) SendSignalAboutResults(opts *bind.TransactOpts, key *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "sendSignalAboutResults", key)
}

// SendSignalAboutResults is a paid mutator transaction binding the contract method 0x584dc9c5.
//
// Solidity: function sendSignalAboutResults(uint256 key) returns()
func (_Contracts *ContractsSession) SendSignalAboutResults(key *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.SendSignalAboutResults(&_Contracts.TransactOpts, key)
}

// SendSignalAboutResults is a paid mutator transaction binding the contract method 0x584dc9c5.
//
// Solidity: function sendSignalAboutResults(uint256 key) returns()
func (_Contracts *ContractsTransactorSession) SendSignalAboutResults(key *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.SendSignalAboutResults(&_Contracts.TransactOpts, key)
}

// ContractsMessageSentIterator is returned from FilterMessageSent and is used to iterate over the raw logs and unpacked data for MessageSent events raised by the Contracts contract.
type ContractsMessageSentIterator struct {
	Event *ContractsMessageSent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsMessageSentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsMessageSent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsMessageSent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsMessageSentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsMessageSentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsMessageSent represents a MessageSent event raised by the Contracts contract.
type ContractsMessageSent struct {
	MessageHash [32]byte
	Message     ProposalVoteFactoryMessage
	Raw         types.Log // Blockchain specific contextual infos
}

// String ContractsMessageSent returns a readable string representing the event struct.
//
// Solidity: event MessageSent(bytes32 messageHash, (uint64,address,uint64,uint64,uint256,uint256,uint256,uint256) message)
func (e *ContractsMessageSent) String() string {
	s := "Event: ContractsMessageSent {\n"

	s += fmt.Sprintf("MessageHash: %v,\n", e.MessageHash)
	s += fmt.Sprintf("Message: %v,\n", e.Message)
	s += "}"

	return s
}

// FilterMessageSent is a free log retrieval operation binding the contract event 0xccecfc1282d17b2e6771ca70815830df03933b6275727f97a8503101756412e0.
//
// Solidity: event MessageSent(bytes32 messageHash, (uint64,address,uint64,uint64,uint256,uint256,uint256,uint256) message)
func (_Contracts *ContractsFilterer) FilterMessageSent(opts *bind.FilterOpts) (*ContractsMessageSentIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "MessageSent")
	if err != nil {
		return nil, err
	}
	return &ContractsMessageSentIterator{contract: _Contracts.contract, event: "MessageSent", logs: logs, sub: sub}, nil
}

// WatchMessageSent is a free log subscription operation binding the contract event 0xccecfc1282d17b2e6771ca70815830df03933b6275727f97a8503101756412e0.
//
// Solidity: event MessageSent(bytes32 messageHash, (uint64,address,uint64,uint64,uint256,uint256,uint256,uint256) message)
func (_Contracts *ContractsFilterer) WatchMessageSent(opts *bind.WatchOpts, sink chan<- *ContractsMessageSent) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "MessageSent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsMessageSent)
				if err := _Contracts.contract.UnpackLog(event, "MessageSent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMessageSent is a log parse operation binding the contract event 0xccecfc1282d17b2e6771ca70815830df03933b6275727f97a8503101756412e0.
//
// Solidity: event MessageSent(bytes32 messageHash, (uint64,address,uint64,uint64,uint256,uint256,uint256,uint256) message)
func (_Contracts *ContractsFilterer) ParseMessageSent(log types.Log) (*ContractsMessageSent, error) {
	event := new(ContractsMessageSent)
	if err := _Contracts.contract.UnpackLog(event, "MessageSent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsProposalCreatedIterator is returned from FilterProposalCreated and is used to iterate over the raw logs and unpacked data for ProposalCreated events raised by the Contracts contract.
type ContractsProposalCreatedIterator struct {
	Event *ContractsProposalCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsProposalCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsProposalCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsProposalCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsProposalCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsProposalCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsProposalCreated represents a ProposalCreated event raised by the Contracts contract.
type ContractsProposalCreated struct {
	App                 common.Address
	VotingTokenAddress  common.Address
	SnapshotBlockNumber *big.Int
	Duration            *big.Int
	MessageHash         [32]byte
	VoteKey             *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// String ContractsProposalCreated returns a readable string representing the event struct.
//
// Solidity: event ProposalCreated(address indexed app, address indexed votingTokenAddress, uint256 snapshotBlockNumber, uint256 duration, bytes32 messageHash, uint256 voteKey)
func (e *ContractsProposalCreated) String() string {
	s := "Event: ContractsProposalCreated {\n"

	s += fmt.Sprintf("App: %v,\n", e.App)
	s += fmt.Sprintf("VotingTokenAddress: %v,\n", e.VotingTokenAddress)
	s += fmt.Sprintf("SnapshotBlockNumber: %v,\n", e.SnapshotBlockNumber)
	s += fmt.Sprintf("Duration: %v,\n", e.Duration)
	s += fmt.Sprintf("MessageHash: %v,\n", e.MessageHash)
	s += fmt.Sprintf("VoteKey: %v,\n", e.VoteKey)
	s += "}"

	return s
}

// FilterProposalCreated is a free log retrieval operation binding the contract event 0xd9bc7a2db30d9cecb6dc2c637f43e132907b2409948fba985287f94e0003abec.
//
// Solidity: event ProposalCreated(address indexed app, address indexed votingTokenAddress, uint256 snapshotBlockNumber, uint256 duration, bytes32 messageHash, uint256 voteKey)
func (_Contracts *ContractsFilterer) FilterProposalCreated(opts *bind.FilterOpts, app []common.Address, votingTokenAddress []common.Address) (*ContractsProposalCreatedIterator, error) {

	var appRule []interface{}
	for _, appItem := range app {
		appRule = append(appRule, appItem)
	}
	var votingTokenAddressRule []interface{}
	for _, votingTokenAddressItem := range votingTokenAddress {
		votingTokenAddressRule = append(votingTokenAddressRule, votingTokenAddressItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "ProposalCreated", appRule, votingTokenAddressRule)
	if err != nil {
		return nil, err
	}
	return &ContractsProposalCreatedIterator{contract: _Contracts.contract, event: "ProposalCreated", logs: logs, sub: sub}, nil
}

// WatchProposalCreated is a free log subscription operation binding the contract event 0xd9bc7a2db30d9cecb6dc2c637f43e132907b2409948fba985287f94e0003abec.
//
// Solidity: event ProposalCreated(address indexed app, address indexed votingTokenAddress, uint256 snapshotBlockNumber, uint256 duration, bytes32 messageHash, uint256 voteKey)
func (_Contracts *ContractsFilterer) WatchProposalCreated(opts *bind.WatchOpts, sink chan<- *ContractsProposalCreated, app []common.Address, votingTokenAddress []common.Address) (event.Subscription, error) {

	var appRule []interface{}
	for _, appItem := range app {
		appRule = append(appRule, appItem)
	}
	var votingTokenAddressRule []interface{}
	for _, votingTokenAddressItem := range votingTokenAddress {
		votingTokenAddressRule = append(votingTokenAddressRule, votingTokenAddressItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "ProposalCreated", appRule, votingTokenAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsProposalCreated)
				if err := _Contracts.contract.UnpackLog(event, "ProposalCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProposalCreated is a log parse operation binding the contract event 0xd9bc7a2db30d9cecb6dc2c637f43e132907b2409948fba985287f94e0003abec.
//
// Solidity: event ProposalCreated(address indexed app, address indexed votingTokenAddress, uint256 snapshotBlockNumber, uint256 duration, bytes32 messageHash, uint256 voteKey)
func (_Contracts *ContractsFilterer) ParseProposalCreated(log types.Log) (*ContractsProposalCreated, error) {
	event := new(ContractsProposalCreated)
	if err := _Contracts.contract.UnpackLog(event, "ProposalCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsSignalSentIterator is returned from FilterSignalSent and is used to iterate over the raw logs and unpacked data for SignalSent events raised by the Contracts contract.
type ContractsSignalSentIterator struct {
	Event *ContractsSignalSent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsSignalSentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsSignalSent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsSignalSent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsSignalSentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsSignalSentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsSignalSent represents a SignalSent event raised by the Contracts contract.
type ContractsSignalSent struct {
	Key    *big.Int
	Result bool
	Raw    types.Log // Blockchain specific contextual infos
}

// String ContractsSignalSent returns a readable string representing the event struct.
//
// Solidity: event SignalSent(uint256 indexed key, bool result)
func (e *ContractsSignalSent) String() string {
	s := "Event: ContractsSignalSent {\n"

	s += fmt.Sprintf("Key: %v,\n", e.Key)
	s += fmt.Sprintf("Result: %v,\n", e.Result)
	s += "}"

	return s
}

// FilterSignalSent is a free log retrieval operation binding the contract event 0xc4e688558d656d11a9491a4e59205d4a0216a1c63ff51c244f00ad567e99fb78.
//
// Solidity: event SignalSent(uint256 indexed key, bool result)
func (_Contracts *ContractsFilterer) FilterSignalSent(opts *bind.FilterOpts, key []*big.Int) (*ContractsSignalSentIterator, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "SignalSent", keyRule)
	if err != nil {
		return nil, err
	}
	return &ContractsSignalSentIterator{contract: _Contracts.contract, event: "SignalSent", logs: logs, sub: sub}, nil
}

// WatchSignalSent is a free log subscription operation binding the contract event 0xc4e688558d656d11a9491a4e59205d4a0216a1c63ff51c244f00ad567e99fb78.
//
// Solidity: event SignalSent(uint256 indexed key, bool result)
func (_Contracts *ContractsFilterer) WatchSignalSent(opts *bind.WatchOpts, sink chan<- *ContractsSignalSent, key []*big.Int) (event.Subscription, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "SignalSent", keyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsSignalSent)
				if err := _Contracts.contract.UnpackLog(event, "SignalSent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSignalSent is a log parse operation binding the contract event 0xc4e688558d656d11a9491a4e59205d4a0216a1c63ff51c244f00ad567e99fb78.
//
// Solidity: event SignalSent(uint256 indexed key, bool result)
func (_Contracts *ContractsFilterer) ParseSignalSent(log types.Log) (*ContractsSignalSent, error) {
	event := new(ContractsSignalSent)
	if err := _Contracts.contract.UnpackLog(event, "SignalSent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsVoteCastIterator is returned from FilterVoteCast and is used to iterate over the raw logs and unpacked data for VoteCast events raised by the Contracts contract.
type ContractsVoteCastIterator struct {
	Event *ContractsVoteCast // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsVoteCastIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsVoteCast)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsVoteCast)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsVoteCastIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsVoteCastIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsVoteCast represents a VoteCast event raised by the Contracts contract.
type ContractsVoteCast struct {
	VoteKey *big.Int
	Voter   common.Address
	Support uint8
	Weight  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// String ContractsVoteCast returns a readable string representing the event struct.
//
// Solidity: event VoteCast(uint256 indexed voteKey, address indexed voter, uint8 support, uint256 weight)
func (e *ContractsVoteCast) String() string {
	s := "Event: ContractsVoteCast {\n"

	s += fmt.Sprintf("VoteKey: %v,\n", e.VoteKey)
	s += fmt.Sprintf("Voter: %v,\n", e.Voter)
	s += fmt.Sprintf("Support: %v,\n", e.Support)
	s += fmt.Sprintf("Weight: %v,\n", e.Weight)
	s += "}"

	return s
}

// FilterVoteCast is a free log retrieval operation binding the contract event 0xb83d25c6a5d258561330739951487acb4bd09ba5190b5d32c4f261817d906792.
//
// Solidity: event VoteCast(uint256 indexed voteKey, address indexed voter, uint8 support, uint256 weight)
func (_Contracts *ContractsFilterer) FilterVoteCast(opts *bind.FilterOpts, voteKey []*big.Int, voter []common.Address) (*ContractsVoteCastIterator, error) {

	var voteKeyRule []interface{}
	for _, voteKeyItem := range voteKey {
		voteKeyRule = append(voteKeyRule, voteKeyItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "VoteCast", voteKeyRule, voterRule)
	if err != nil {
		return nil, err
	}
	return &ContractsVoteCastIterator{contract: _Contracts.contract, event: "VoteCast", logs: logs, sub: sub}, nil
}

// WatchVoteCast is a free log subscription operation binding the contract event 0xb83d25c6a5d258561330739951487acb4bd09ba5190b5d32c4f261817d906792.
//
// Solidity: event VoteCast(uint256 indexed voteKey, address indexed voter, uint8 support, uint256 weight)
func (_Contracts *ContractsFilterer) WatchVoteCast(opts *bind.WatchOpts, sink chan<- *ContractsVoteCast, voteKey []*big.Int, voter []common.Address) (event.Subscription, error) {

	var voteKeyRule []interface{}
	for _, voteKeyItem := range voteKey {
		voteKeyRule = append(voteKeyRule, voteKeyItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "VoteCast", voteKeyRule, voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsVoteCast)
				if err := _Contracts.contract.UnpackLog(event, "VoteCast", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVoteCast is a log parse operation binding the contract event 0xb83d25c6a5d258561330739951487acb4bd09ba5190b5d32c4f261817d906792.
//
// Solidity: event VoteCast(uint256 indexed voteKey, address indexed voter, uint8 support, uint256 weight)
func (_Contracts *ContractsFilterer) ParseVoteCast(log types.Log) (*ContractsVoteCast, error) {
	event := new(ContractsVoteCast)
	if err := _Contracts.contract.UnpackLog(event, "VoteCast", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
